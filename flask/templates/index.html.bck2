<!DOCTYPE html>
<html lang="en">
   <head>
      <meta charset="utf-8">
      <title>Live Calls Analysis</title>
      <script type="text/javascript" src="//d3js.org/d3.v3.min.js"></script>
      <style type="text/css"></style>
      <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.3.6/socket.io.min.js"></script>
      <script type="text/javascript" charset="utf-8">
            var socket = io.connect('http://' + document.domain + ':' + location.port);
            socket.on('connect', function() {
                 console.log('connected');
            });
            socket.on('message', function(data) {
                 console.log(data);
            });
      </script>
   </head>
   <body>
      <div id="container">
         <h1>Call Data Record</h1>
      </div>
      <script type="text/javascript">
         //Width and height
         var w = 760;
         var h = 600;
         
         //Define map projection
         var projection = d3.geo.mercator()
            .center([ -120, 37 ])
            .translate([ w/2, h/2 ])
            .scale([ w*3.3 ]);
         
         //Define path generator
         var path = d3.geo.path()
          .projection(projection);
         
         
         // Create SVG Element
         var svg = d3.select("#container").append("svg")
             .attr("width", w)
             .attr("height", h);
             var y = d3.scale.sqrt()
                 .domain([0, 500000])
                 .range([0,325]);
         
         // Define scale to sort data values into color buckets
         var color = d3.scale.threshold()
             .domain([1000, 20000, 100000, 200000, 500000, 1000000, 200000, 4000000, 15000000])
             .range(["#fff7ec","#fee8c8","#fdd49e","#fdbb84","#fc8d59","#ef6548","#d7301f","#b30000","#7f0000"]);
         
         var yAxis = d3.svg.axis()
             .scale(y)
             .tickValues(color.domain())
             .orient("right");
         
         // Load CSV
         d3.csv("../static/data/pop_cali.csv", function(data) {
             // Load TopoJSON
             d3.json("../static/json/cb_2014_us_county_5m.json", function(error, ca) {
                 for (var i = 0; i < data.length; i++) {
                     	var dataCounty = data[i].county;
                     	var dataPop = parseFloat(data[i].pop_total);
                     	for (var j = 0; j < ca.features.length; j++) {
                     		var jsonCounty = ca.features[j].properties.NAME;
         				if (dataCounty.toUpperCase() == jsonCounty.toUpperCase()) {
         					ca.features[j].properties.population = dataPop;
                         			break;
          				}
          		}
         	}
         
         //Bind data and c$reate one path per GeoJSON feature
         svg.selectAll("path")
         .data(ca.features)
         .enter()
         .append("path")
         .attr("d", path);
         
         //var g = svg.append("g")
         //    .attr("class", "key")
         //    .attr("transform", "translate(320, 165)")
         //    .call(yAxis);
         //
         //g.selectAll("rect")
         //.data(color.range().map(function(d, i) {
         //    return {
         //        y0: i ? y(color.domain()[i - 1]) : y.range()[0],
         //        y1: i < color.domain().length ? y(color.domain()[i]) : y.range()[1],
         //        z: d
         //    };
         //}))
         //.enter().append("rect")
         //    .attr("width", 8)
         //    .attr("y", function(d) { return d.y0; })
         //    .attr("height", function(d) { return d.y1 - d.y0; })
         //    .style("fill", function(d) { return d.z; });
         
         svg.selectAll(".subunit")
             .data(ca.features)
             .enter().append("path")
             .attr("d", path)
             .style("fill", function(d) {
              console.log(d)
                
	 var population = d.properties.population;
             if (population) {
            		return color(population);
              } else {
              	return "#ddd";
              }
             })
          .on("mouseover", function(d) {
              var xPosition = d3.mouse(this)[0];
              var yPosition = d3.mouse(this)[1] - 30;
         
              svg.append("text")
                  .attr("id", "tooltip")
                  .attr("x", xPosition)
                  .attr("y", yPosition)
                  .attr("text-anchor", "middle")
                  .attr("font-family", "sans-serif")
                  .attr("font-size", "11px")
                  .attr("font-weight", "bold")
                  .attr("fill", "black")
                  .text(d.properties.NAME);
              
	       d3.select(this)
              	  .style("fill", "#509e2f");
          })
	.on("mouseout", function(d) {
	d3.select("#tooltip").remove();
	d3.select(this)
	.transition()
	.duration(250)
	.style("fill", function(d) {
		var population = d.properties.population;
    		if (population) {
        		return color(population);
    		} else {
        	return "#ddd";
    		}
          });
     });
    });
});
         
      </script>
   </body>
</html>
